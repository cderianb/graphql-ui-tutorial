{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [$setup.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, \"Something went wrong...\")) : _createCommentVNode(\"v-if\", true), $setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Loading...\")) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.result.characters.results, character => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: character.id\n    }, _toDisplayString(character.name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_3], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","$setup","error","_createElementBlock","_hoisted_1","loading","_hoisted_2","_Fragment","key","_renderList","result","characters","results","character","id","name","_hoisted_3"],"sources":["D:\\Programming\\graphql-tutorial\\graphql-ui\\src\\App.vue"],"sourcesContent":["<template>\n  <p v-if=\"error\">Something went wrong...</p>\n  <p v-if=\"loading\">Loading...</p>\n  <p v-else v-for=\"character in result.characters.results\" :key=\"character.id\">\n    {{ character.name }}\n  </p>\n  <div></div>\n</template>\n\n<script>\nimport gql from 'graphql-tag'\nimport { useQuery } from '@vue/apollo-composable'\n\nconst CHARACTERS_QUERY = gql`\n  query Characters {\n    characters {\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`\n\nconst EMPLOYEE_QUERY = gql`\n{\n  allEmployees {\n    edges {\n      node {\n        name\n        hiredOn\n      }\n    }\n  }\n}`\n\nexport default {\n  name: 'App',\n  setup () {\n    const { result, loading, error } = useQuery(EMPLOYEE_QUERY);\n    return {\n      result,\n      loading, \n      error\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;;;;;gCAMEA,mBAAA,CAAW;;;6DALFC,MAAA,CAAAC,KAAK,I,cAAdC,mBAAA,CAA2C,KAAAC,UAAA,EAA3B,yBAAuB,K,mCAC9BH,MAAA,CAAAI,OAAO,I,cAAhBF,mBAAA,CAAgC,KAAAG,UAAA,EAAd,YAAU,M,kBAC5BH,mBAAA,CAEII,SAAA;IAAAC,GAAA;EAAA,GAAAC,WAAA,CAF0BR,MAAA,CAAAS,MAAM,CAACC,UAAU,CAACC,OAAO,EAAtCC,SAAS;yBAA1BV,mBAAA,CAEI;MAFsDK,GAAG,EAAEK,SAAS,CAACC;wBACpED,SAAS,CAACE,IAAI;kCAEnBC,UAAW,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}